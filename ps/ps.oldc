/* ps commnad */
/* memo: base font color white */

esc(code, flag)
char code[];
{
  if(flag==0){
    printf("%c[%s", 033, code);
  }
}

main(argc, argv)
char argv[][];
{
  extern printf, exit;
  extern actcnt, waicnt, zomcnt, escf; /* p.stat counter */
  int j;/* arg anaysis while counter */
  int bactcnt, bwaicnt, bzomcnt, cntf;/* b*:backup, cntf: other:changem, 0:unchange */
  int i, oldslot, updslot;/* i:16 slot while counter, oldslot:backup reverse slot*/
  int chflag, initf;/* chflag:data change flag, initf:init print flag, slotf:update old slot */
  int sloupf, bmpid;/* slot number print flag(old or current) */
  /* arg flag */
  int repf; /* repeat flag, escape flag */

  /* process status*/
  /* 0: unused or free*/
  /* 1: active*/
  /* 2: witinf for a process die*/
  /* 3: zombie*/

  
  char uuno[1];    /* u.uno:1byte */
  int dska[16];    /* dska:16word    */
  int ppid[16];    /* p.pid:16word   */
  int pppid[16];   /* p.ppid:16word */
  char pstat[16];  /* p.stat:16byte */
  int mpid[1]; /* 1 word */

  /* data backup vector */
  int bppid[16];
  int bpppid[16];
  char bpstat[16];
  int bdska[16];

  /* address set */
  pstat=024156;
  uuno=037775;
  ppid=023736;
  pppid=024036;
  dska=023776;
  mpid=025242;

  /* flag init */
  initf=0;
  sloupf=0;
  updslot=0;
  repf=0;

  /* arg parser */
  j = 1;/* argv[1][0] == '-' */
  if(--argc>0 & *argv[1]=='-'){
    while(1){
      switch(argv[1][j]){
        case 'h':
          help();
          exit(0);
          break;
        case 'r':     
          repf++;
          break;
        case 'c':
          escf++;
          break;
        default:
          goto fini;
      }
      j++;
    }
  } else {
    /* not arg */
  }
fini:/* arg parse finish label */
  
  esc("2J", 0);      /* clear screen */
  esc("H", 0);       /* cursor reset */

    /* print title */
  esc("30m", escf);  /* font color black */
  esc("47m", escf);  /* back color white */
  esc("K", 0);/* kill line */
  printf("SLOT\tPID\tPPID\tSTAT\tSWP-BK\#\tCMD");
  while(1){
    if(repf){
      esc("?25l", 0);/* cursor disable */
    }
    esc("0m", escf); /* init reset color */
    printf("\n");

    i = 0;
    while(i<16){

      /* update branch */
      if (initf==1){
        if(ppid[i] != bppid[i]){
          chflag=1;
        } else if (pppid[i] != bpppid[i]){
          chflag=1;
        } else if (pstat[i] != bpstat[i]){
          chflag=1;
        } else if (*mpid != bmpid){/* slot numbre update */
          chflag=1;
        } else if (sloupf){/* old slot update(white color) */
          chflag=1;
        }
      } else {
        chflag=1;  /* init only */
        cntf++;
      }



/* --------------------------------------------------------------------------------------- */
/* slot update control */
/* updslot: set old reverse slot number.need white color update */


      if(chflag==1){
        esc("2K", 0);  /* line del */

        /* old slot update white color */

        if(i==updslot){
          esc("37m", escf);/* font color white */
          printf("%d\t", i + 1);    /* slot   */
          sloupf++;
          esc("0m", escf);/* color reset */
        }


        

        if(*mpid == ppid[i]){
          if(pstat[i] == 1){  /* active */
            if(oldslot != i){
              updslot=oldslot;
            }
            esc("7m", escf);/* color reverse */
            oldslot=i;/* record reverse slot update*/
          }            
        }

        
      
        if(sloupf==0){
          esc("37m", escf);               /* font color white */
          printf("%d\t", i + 1);    /* slot   */
        }
/* ----------------------------------------------------------------------------------------- */
      
        esc("0m", escf);                /* color reset*/
        esc("37m", escf);               /* font color reset */
      
        pidcol(pstat[i]);
        printf("%d\t", ppid[i]);  /* p.pid  */

        esc("0m", escf);                /* color reset*/
        esc("37m", escf);               /* font color reset */
      
        printf("%d\t", pppid[i]); /* p.ppid */
        getstat(pstat[i]);        /* p.stat */
        printf("%d\t", dska[i]);  /* p.dska */
        getcom(ppid[i], ppid[*uuno - 1]);
        printf("\n");
      } else {
        printf("\n");
      }
      statcnt(pstat[i]);

      /* data backup */
      bppid[i] = ppid[i];
      bpppid[i] = pppid[i];
      bpstat[i] = pstat[i];


      chflag=0;
      sloupf=0;

      i++;

    }
    initf=1;/* init finish */

    printf("\n");
    /* statistics */
    if(bactcnt!=actcnt){
      cntf++;
    } else if (bwaicnt!=waicnt){
      cntf++;
    } else if (bzomcnt!=zomcnt){
      cntf++;
    }

    if(cntf!=0){
      esc("30m", escf);  /* font col: black */
      esc("47m", escf);  /* back color white */
      esc("K", 0);/* kill line */
      printf("MPID: %d\t", *mpid);
      printf("NPROC: %d (act: %d wait: %d zmb: %d)", actcnt+waicnt+zomcnt, actcnt, waicnt, zomcnt);
      esc("0m", escf);   /* base color reset */
      cntf=0;
    }else{
      printf("\n");
    }
    if(repf==0){
      break;
    }
    /* backup routine */
    bactcnt=actcnt;
    bwaicnt=waicnt;
    bzomcnt=zomcnt;
    actcnt=0;
    waicnt=0;
    zomcnt=0;

    bmpid=mpid[0];
    esc("0m", escf); 
    esc("H", 0);    /* curser reset */
  }
  esc("0m", escf);
  printf("\n");
  exit(0);
}

getcom(ppidd, pspid)
int ppidd;
char pspid;
{
  if(ppidd == 1){
    printf("init\t");
  }else if(pspid == ppidd){
    printf("ps\t");
  }
}

pidcol(statd)
char statd;
{
  extern escf;
  switch(statd){
    case 0: /* unused */
      break;
    case 1: /* active */
      esc("41m", escf); /* back color:red */
      esc("1m", escf);  /* font bold */
      break;
    case 2: /* wait */
      esc("44m", escf); /* back color:blue */
      break;
    case 3:  /* zombie */
      esc("43m", escf); /* back color :yellow */
      esc("30m", escf); /* font col: black */
      break;
    default:  /* error */
      printf("error\t");
      break;
  }
}

statcnt(statd)
char statd;
{
  extern actcnt, waicnt, zomcnt; /* p.stat counter */
  switch(statd){
    case 1:
      actcnt++;
      break;
    case 2:
      waicnt++;
      break;
    case 3:
      zomcnt++;
      break;
    default:
      break;
  }
}

getstat(statd)
char statd;
{
  extern actcnt, waicnt, zomcnt, escf; /* p.stat counter */
  switch(statd){
    case 0:
      esc("0m", escf);
      esc("37m", escf);
      printf("unused\t");
      break;
    case 1:
      esc("41m", escf);  /* back color red */
      esc("37m", escf);  /* font color white */
      actcnt++;
      printf("active\t");
      break;
    case 2:
      esc("44m", escf); /* back color:blue */
      waicnt++;
      printf("wait  \t");
      break;
    case 3:
      esc("43m", escf); /* back color :yellow */
      esc("30m", escf); /* font col: black */
      zomcnt++;
      printf("zombie\t");
      break;
    default:
      printf("error\t");
      break;
  }
  esc("0m", escf);  /* color reset */
  esc("37m", escf); /* font color reset*/
}

help(){
  extern printf;
  printf("process command\n");
  printf("\nUsage:\n  ps  [options]\n");
  printf("\nMeta options:\n");
  printf("  -h\thelp menu\n");
  printf("  -r\trepeat ***warning infinite loop***\n");
  printf("  -c\thilight disable\n");
}

actcnt 0;
waicnt 0;
zomcnt 0;
escf 0;
